/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the LICENSE file.
 */


import org.jetbrains.kotlin.*
import org.jetbrains.kotlin.gradle.plugin.tasks.KonanCompileNativeBinary

buildscript {
    repositories {
        mavenCentral()

        maven {
            url project.bootstrapKotlinRepo
        }
    }
}

void loadLocalProperties() {
    if (new File("$project.rootDir/local.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream("$project.rootDir/local.properties"))
        props.each { prop -> project.ext.set(prop.key, prop.value) }
    }
}

void loadCommandLineProperties() {
    if (project.hasProperty("konanc_flags")) {
        throw new Error("Specify either -Ptest_flags or -Pbuild_flags.")
    }

    ext.globalBuildArgs = new ArrayList<String>()
    if (project.hasProperty("build_flags")) {
        for (String flag : ext.build_flags.toString().split("\\s")) {
            flag = flag.trim()
            if (!flag.isEmpty()) ext.globalBuildArgs.add(flag)
        }
    }

    ext.globalTestArgs = new ArrayList<String>()
    ext.globalTestArgs.add("-Xpartial-linkage=enable")
    ext.globalTestArgs.add("-Xpartial-linkage-loglevel=error")
    if (project.hasProperty("test_flags")) {
        for (String flag : ext.test_flags.toString().split("\\s")) {
            flag = flag.trim()
            if (!flag.isEmpty()) ext.globalTestArgs.add(flag)
        }
    }

    ext.testTarget = project.hasProperty("test_target") ? ext.test_target : PlatformInfo.hostName
}

loadCommandLineProperties()
loadLocalProperties()

apply plugin: 'platform-manager'
apply plugin: 'konan'
apply plugin: 'kotlin'
apply plugin: 'kotlin.native.build-tools-conventions'
apply plugin: 'native-dependencies'

configurations {
    update_tests
}

ext.testOutputRoot = rootProject.file("test.output").absolutePath

ext.platformManager = project.extensions.platformManager
ext.target = platformManager.targetManager(project.testTarget).target

ext.buildNumber = rootProject.property("kotlinVersion")

// Add executor to run tests depending on a target
// NOTE: If this persists in a gradle daemon, environment update (e.g. an Xcode update) may lead to execution failures.
project.extensions.executor = ExecutorServiceKt.create(project)

ext.useCustomDist = UtilsKt.getUseCustomDist(project)
ext.kotlinNativeDist = UtilsKt.getKotlinNativeDist(project)
if (!useCustomDist) {
    ext.setProperty("kotlin.native.home", kotlinNativeDist.absolutePath)
    ext.setProperty("org.jetbrains.kotlin.native.home", kotlinNativeDist.absolutePath)
    ext.setProperty("konan.home", kotlinNativeDist.absolutePath)
}

compileTestKotlin {
    compilerOptions.freeCompilerArgs.add("-Xskip-prerelease-check")
}

// Do not generate run tasks for konan built artifacts
ext.konanNoRun = true

final CacheTesting cacheTesting = CacheTestingKt.configureCacheTesting(project)
if (cacheTesting != null) {
    // Check for debug build and set the -g option.
    if (project.globalTestArgs.contains("-opt")) {
        throw new IllegalArgumentException("Cache testing should be run with debug build. " +
                "Remove -opt options from the test args")
    }
    if (!project.globalTestArgs.contains("-g")) {
        project.globalTestArgs.add("-g")
    }

    // Note: can't do this in [CacheTesting.configure] since task classes aren't accessible there.
    tasks.withType(KonanCompileNativeBinary.class).configureEach {
        dependsOn cacheTesting.buildCacheTask
        extraOpts cacheTesting.compilerArgs
    }
}

// Enable two-stage test compilation if the test_two_stage property is set.
ext.twoStageEnabled = project.hasProperty("test_two_stage")

tasks.withType(KonanCompileNativeBinary.class).configureEach {
    enableTwoStageCompilation = twoStageEnabled
}

ext.isNoopGC = project.globalTestArgs.contains("-Xbinary=gc=noop") || project.globalTestArgs.contains("-Xgc=noop")
ext.isSTWMSGC = project.globalTestArgs.contains("-Xbinary=gc=stwms") || project.globalTestArgs.contains("-Xgc=stms")
ext.isAggressiveGC = project.globalTestArgs.contains("-Xbinary=gcSchedulerType=aggressive")
ext.isWithStateChecker = project.globalTestArgs.contains("-Xbinary=checkStateAtExternalCalls=true") || project.globalTestArgs.contains("-Xcheck-state-at-external-calls")
ext.runtimeAssertionsPanic = false

// TODO: It also makes sense to test -g without asserts, and also to test -opt with asserts.
if (project.globalTestArgs.contains("-g") && (cacheTesting == null)) {
    tasks.withType(KonanCompileNativeBinary.class).configureEach {
        extraOpts "-Xbinary=runtimeAssertionsMode=panic"
    }
    ext.runtimeAssertionsPanic = true
}

tasks.withType(KonanCompileNativeBinary).configureEach {
    extraOpts "-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion"
    extraOpts "-opt-in=kotlinx.cinterop.ExperimentalForeignApi"
}

allprojects {
    // Root directories for test output (logs, compiled files, statistics etc). Only single path must be in each set.
    // backend.native/tests
    ext.testOutputLocal = rootProject.file("$testOutputRoot/local")

    // backend.native/tests/external
    ext.testOutputExternal = rootProject.file("$testOutputRoot/external")

    // backend.native/tests/framework
    ext.testOutputFramework = rootProject.file("$testOutputRoot/framework")
}
testOutputExternal.mkdirs()

tasks.named("clean", Delete.class) {
    delete(testOutputRoot)
}

tasks.named("run") {
    dependsOn(tasks.withType(KonanTest).matching { it.enabled })
    // Add regular gradle test tasks
    dependsOn(tasks.withType(Test).matching { it.enabled })
}

// Was a subset of tests.
tasks.register("sanity") {
    dependsOn("run")
}

boolean isExcluded(String dir) {
    // List of tests that fail due to unresolved compiler bugs
    def excluded = [ ]

    boolean result = false
    excluded.forEach {
        if (dir.endsWith(it.replace("/", File.separator))) {
            result = true
        }
    }
    return result
}

/**
 * Creates a task for a standalone test. Configures runner and adds building task.
 */
Task standaloneTest(String name, Closure configureClosure) {
    return KotlinNativeTestKt.createTest(project, name, KonanStandaloneTest) { task ->
        task.configure(configureClosure)
        if (task.enabled) {
            konanArtifacts {
                program(name, targets: [target.name]) {
                    baseDir   "$testOutputLocal/$name"
                    srcFiles  task.getSources()
                    extraOpts task.flags
                    extraOpts project.globalTestArgs
                }
            }
        }
    }
}

/**
 * Creates a task for a dynamic test. Configures runner and adds library and test build tasks.
 */
Task dynamicTest(String name, Closure<KonanDynamicTest> configureClosure) {
    return KotlinNativeTestKt.createTest(project, name, KonanDynamicTest) { KonanDynamicTest task ->
        task.configure(configureClosure)
        if (task.enabled) {
            konanArtifacts {
                def targetName = target.name
                def lib = task.interop
                if (lib != null) {
                    UtilsKt.dependsOnKonanBuildingTask(task, lib, target)
                }
                dynamic(name, targets: [targetName]) {
                    if (lib != null) {
                        libraries {
                            artifact lib
                        }
                    }
                    srcFiles task.getSources()
                    baseDir  "$testOutputLocal/$name"
                    extraOpts task.flags
                    extraOpts project.globalTestArgs
                    if (targetName == "mingw_x64" || targetName == "mingw_x86") {
                        extraOpts "-linker-option", "-Wl,--out-implib,$testOutputLocal/$name/$targetName/${name}.dll.a"
                    }
                }
            }
            def buildTask = UtilsKt.findKonanBuildTask(project, name, target)
            UtilsKt.dependsOnDist(buildTask)
            task.dependsOn(nativeDependencies.llvmDependency)
            task.dependsOn(nativeDependencies.targetDependency(target))
        }
    }
}

// A helper method to create interop artifacts
void createInterop(String name, Closure conf) {
    konanArtifacts {
        interop(name, targets: [target.name]) {
            dependsOn(nativeDependencies.llvmDependency)
            dependsOn(nativeDependencies.targetDependency(target))
            conf(it)
            noDefaultLibs(true)
            noEndorsedLibs(true)
            baseDir "$testOutputLocal/$name"
        }
    }
}

createInterop("sockets") {
    it.defFile 'interop/basics/sockets.def'
}

createInterop("kt43502") {
    it.defFile 'interop/kt43502/kt43502.def'
    it.headers "$projectDir/interop/kt43502/kt43502.h"
    // Note: also hardcoded in def file.
    final File libDir = project.layout.buildDirectory.dir("kt43502").get().asFile
    // Construct library that contains actual symbol definition.
    it.getByTarget(target.name).configure {
        doFirst {
            UtilsKt.buildStaticLibrary(
                    project,
                    [file("$projectDir/interop/kt43502/kt43502.c")],
                    file("$libDir/kt43502.a"),
                    file("$libDir/kt43502.objs"),
            )
        }
    }
}

dynamicTest("interop_kt43502") {
    interop = "kt43502"
    source = "interop/kt43502/main.kt"
    cSource = "$projectDir/interop/kt43502/main.c"
    useGoldenData = true
}

standaloneTest("kt51302") {
    enabled = project.target.name == PlatformInfo.hostName
    source = "serialization/KT-51302/main.kt"
    flags = ["-l", "$projectDir/serialization/KT-51302/kt51302_dependency"]
}

dependencies {
    api project(':native:cli-native')
    api libs.junit4
}

project.afterEvaluate {
    // Don't treat any task as up-to-date, no matter what.
    // Note: this project should contain only test tasks, including ones that build binaries,
    // and ones that run binaries.
    // So the configuration below mostly means "tests aren't up-to-date".
    tasks.configureEach {
        outputs.upToDateWhen { false }
    }
}
